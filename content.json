{"meta":{"title":"孤狼博客","subtitle":"生命不息，折腾不止","description":"生命不息，折腾不止","author":"Eric","url":"http://lonewolferic.github.io"},"pages":[{"title":"About Me","date":"2018-09-02T06:50:46.000Z","updated":"2018-09-02T14:47:02.227Z","comments":true,"path":"about/index.html","permalink":"http://lonewolferic.github.io/about/index.html","excerpt":"","text":"四川大学某菜鸡工科狗 会一点点嵌入式，会一点点电路，会一点点python，会一点点linux 写不出代码，de不出bug，转不动电机 喜欢搞机，喜欢造人工智障 热爱健身，喜爱摄影 想学很多东西，以前觉得读到双博士才能学完想学的，现在发现自己的智商根本不配读大学 直男癌晚期，没救了 有的时候会有很多奇妙的想法，但……就是因为自己太菜了实现不了 唔……反正就是很菜 联系方式：871855626@qq.com"},{"title":"","date":"2018-09-02T08:31:04.231Z","updated":"2018-09-02T08:20:47.797Z","comments":true,"path":"img/pexels/README.html","permalink":"http://lonewolferic.github.io/img/pexels/README.html","excerpt":"","text":"Pexels pictures License https://www.pexels.com/photo-license/ It’s hard to understand complex licenses that is why all photos on Pexels are licensed under the Creative Commons Zero (CC0) license. This means the pictures are completely free to be used for any legal purpose. The pictures are free for personal and even for commercial use. You can modify, copy and distribute the photos. All without asking for permission or setting a link to the source. So, attribution is not required. The only restriction is that identifiable people may not appear in a bad light or in a way that they may find offensive, unless they give their consent. You should also make sure the depicted content (people, logos, private property, etc.) is suitable for your application and doesn’t infringe any rights. The CC0 license was released by the non-profit organization Creative Commons (CC). Get more information about Creative Commons images and the license on the official license page. CC0 1.0 UniversalOfficial translations of this legal tool are available in other languages. CREATIVE COMMONS CORPORATION IS NOT A LAW FIRM AND DOES NOT PROVIDE LEGAL SERVICES. DISTRIBUTION OF THIS DOCUMENT DOES NOT CREATE AN ATTORNEY-CLIENT RELATIONSHIP. CREATIVE COMMONS PROVIDES THIS INFORMATION ON AN &quot;AS-IS&quot; BASIS. CREATIVE COMMONS MAKES NO WARRANTIES REGARDING THE USE OF THIS DOCUMENT OR THE INFORMATION OR WORKS PROVIDED HEREUNDER, AND DISCLAIMS LIABILITY FOR DAMAGES RESULTING FROM THE USE OF THIS DOCUMENT OR THE INFORMATION OR WORKS PROVIDED HEREUNDER. Statement of Purpose The laws of most jurisdictions throughout the world automatically confer exclusive Copyright and Related Rights (defined below) upon the creator and subsequent owner(s) (each and all, an “owner”) of an original work of authorship and/or a database (each, a “Work”). Certain owners wish to permanently relinquish those rights to a Work for the purpose of contributing to a commons of creative, cultural and scientific works (“Commons”) that the public can reliably and without fear of later claims of infringement build upon, modify, incorporate in other works, reuse and redistribute as freely as possible in any form whatsoever and for any purposes, including without limitation commercial purposes. These owners may contribute to the Commons to promote the ideal of a free culture and the further production of creative, cultural and scientific works, or to gain reputation or greater distribution for their Work in part through the use and efforts of others. For these and/or other purposes and motivations, and without any expectation of additional consideration or compensation, the person associating CC0 with a Work (the “Affirmer”), to the extent that he or she is an owner of Copyright and Related Rights in the Work, voluntarily elects to apply CC0 to the Work and publicly distribute the Work under its terms, with knowledge of his or her Copyright and Related Rights in the Work and the meaning and intended legal effect of CC0 on those rights. Copyright and Related Rights. A Work made available under CC0 may be protected by copyright and related or neighboring rights (“Copyright and Related Rights”). Copyright and Related Rights include, but are not limited to, the following: the right to reproduce, adapt, distribute, perform, display, communicate, and translate a Work; moral rights retained by the original author(s) and/or performer(s); publicity and privacy rights pertaining to a person’s image or likeness depicted in a Work; rights protecting against unfair competition in regards to a Work, subject to the limitations in paragraph 4(a), below; rights protecting the extraction, dissemination, use and reuse of data in a Work; database rights (such as those arising under Directive 96/9/EC of the European Parliament and of the Council of 11 March 1996 on the legal protection of databases, and under any national implementation thereof, including any amended or successor version of such directive); and other similar, equivalent or corresponding rights throughout the world based on applicable law or treaty, and any national implementations thereof. Waiver. To the greatest extent permitted by, but not in contravention of, applicable law, Affirmer hereby overtly, fully, permanently, irrevocably and unconditionally waives, abandons, and surrenders all of Affirmer’s Copyright and Related Rights and associated claims and causes of action, whether now known or unknown (including existing as well as future claims and causes of action), in the Work (i) in all territories worldwide, (ii) for the maximum duration provided by applicable law or treaty (including future time extensions), (iii) in any current or future medium and for any number of copies, and (iv) for any purpose whatsoever, including without limitation commercial, advertising or promotional purposes (the “Waiver”). Affirmer makes the Waiver for the benefit of each member of the public at large and to the detriment of Affirmer’s heirs and successors, fully intending that such Waiver shall not be subject to revocation, rescission, cancellation, termination, or any other legal or equitable action to disrupt the quiet enjoyment of the Work by the public as contemplated by Affirmer’s express Statement of Purpose. Public License Fallback. Should any part of the Waiver for any reason be judged legally invalid or ineffective under applicable law, then the Waiver shall be preserved to the maximum extent permitted taking into account Affirmer’s express Statement of Purpose. In addition, to the extent the Waiver is so judged Affirmer hereby grants to each affected person a royalty-free, non transferable, non sublicensable, non exclusive, irrevocable and unconditional license to exercise Affirmer’s Copyright and Related Rights in the Work (i) in all territories worldwide, (ii) for the maximum duration provided by applicable law or treaty (including future time extensions), (iii) in any current or future medium and for any number of copies, and (iv) for any purpose whatsoever, including without limitation commercial, advertising or promotional purposes (the “License”). The License shall be deemed effective as of the date CC0 was applied by Affirmer to the Work. Should any part of the License for any reason be judged legally invalid or ineffective under applicable law, such partial invalidity or ineffectiveness shall not invalidate the remainder of the License, and in such case Affirmer hereby affirms that he or she will not (i) exercise any of his or her remaining Copyright and Related Rights in the Work or (ii) assert any associated claims and causes of action with respect to the Work, in either case contrary to Affirmer’s express Statement of Purpose. Limitations and Disclaimers. No trademark or patent rights held by Affirmer are waived, abandoned, surrendered, licensed or otherwise affected by this document. Affirmer offers the Work as-is and makes no representations or warranties of any kind concerning the Work, express, implied, statutory or otherwise, including without limitation warranties of title, merchantability, fitness for a particular purpose, non infringement, or the absence of latent or other defects, accuracy, or the present or absence of errors, whether or not discoverable, all to the greatest extent permissible under applicable law. Affirmer disclaims responsibility for clearing rights of other persons that may apply to the Work or any use thereof, including without limitation any person’s Copyright and Related Rights in the Work. Further, Affirmer disclaims responsibility for obtaining any necessary consents, permissions or other rights required for any use of the Work. Affirmer understands and acknowledges that Creative Commons is not a party to this document and has no duty or obligation with respect to this CC0 or use of the Work."}],"posts":[{"title":"Hexo博客markdown文件图片路径自动处理脚本","slug":"auto-blog-img-path-process","date":"2018-09-05T04:20:36.000Z","updated":"2018-09-09T02:08:58.765Z","comments":true,"path":"2018/09/05/auto-blog-img-path-process/","link":"","permalink":"http://lonewolferic.github.io/2018/09/05/auto-blog-img-path-process/","excerpt":"","text":"问题描述Hexo博客通过markdown文件来生成html文件。而我们的博客中经常会插入图片，如何方便的让插入的图片经过渲染之后正确地显示在网页上是我们要解决的问题。 传送门：hexo博客的图片解决方法 这里的方案可以在hexo new post的时候产生一个文件夹，并且在hexo g的时候自动关联图片文件夹和md文件。但是我们在写博客的时候插入图片一般是直接将图片拖入typora中，这样留下的图片路径是绝对路径，但是hexo编译需要我们的图片路径是相对路径才可以正确现实图片。那么怎么整呢？每次拖进去之后切换源码模式然后自己删路径？不不不不，像我们这么聪（lan）明（duo）的人，肯定是要用自动的方式来解决这个问题。 于是就有了这么一个脚本，主要工作思路就是找到带有图片的文章（有同名的文件夹），然后打开文章，用正则表达式寻找图片链接，然后删除前面的路径，只剩下相对路径。 使用方法配置详细方法在上面的链接中。这里就讲一个注意点： hexo的_config.yml这里的配置 1post_asset_folder: true 执行来到_Post的目录下，运行python代码： 1python turn.py 大功告成 源码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364import osimport reclass Article: def __init__(self, name): self.name = name self.dir = name.strip('.md') # print(self.name) # print(self.dir) def run(self): f = open(self.name, 'r', encoding='UTF-8') f_new = open(self.name + '.new', 'w', encoding='UTF-8') print('正在修改' + self.name + '的图片路径') lines = f.readlines() for line in lines: picture_path = re.findall(r'!\\[.&#123;0,100&#125;\\]\\(.&#123;0,10000&#125;\\)', line) # print(line) if picture_path: picture_path = picture_path[0] # print(picture_path) new_path = picture_path[0 : picture_path.index('(') + 1] + picture_path[picture_path.index(self.dir) : ] + '\\r\\n' #print(new_path) f_new.write(new_path) else: f_new.write(line) f.close() f_new.close() # 换文件 os.remove(self.name) os.rename(self.name + '.new', self.name) print('修改完毕')def main(): article_list = [] dir_list = [] article_with_picture_list = [] files = os.listdir('.') # print(files) for f in files: if '.md' in f: article_list.append(f) elif '.' not in f: dir_list.append(f) # print(article_list) # print(dir_list) for dir in dir_list: for article in article_list: if dir in article: article_with_picture_list.append(article) print('查询到本目录下有以下文章的图片路径需要修改：') for article_with_picture in article_with_picture_list: print(article_with_picture) # 执行转换 for article_with_picture in article_with_picture_list: article = Article(article_with_picture) article.run() print('谢谢使用')if __name__ == \"__main__\": main()","categories":[{"name":"Python","slug":"Python","permalink":"http://lonewolferic.github.io/categories/Python/"}],"tags":[{"name":"技术","slug":"技术","permalink":"http://lonewolferic.github.io/tags/技术/"},{"name":"python","slug":"python","permalink":"http://lonewolferic.github.io/tags/python/"}]},{"title":"建议认真学的选修课","slug":"Suggested-elective-courses","date":"2018-09-03T16:00:00.000Z","updated":"2018-09-09T02:08:58.769Z","comments":true,"path":"2018/09/04/Suggested-elective-courses/","link":"","permalink":"http://lonewolferic.github.io/2018/09/04/Suggested-elective-courses/","excerpt":"","text":"工程制图 推荐指数：4 如果要搞机器人比赛，机（bei）械（guo）组画图的时候总得看懂吧，虽然教的很浅，但是大致听听，懂点东西还是好很多的。 复变函数 推荐指数：10 以前觉得傅里叶拉普拉斯有啥用？我就是饿死，挂科，死外边，也不会去学他的！嗯，真香！工程里频域分析比时域分析方便多了。 同时，复变函数是信号与系统的基础，信号与系统又是 自动控制原理的基础。so……学不好复变，满盘皆输！ 已经变必修了 数值分析 推荐指数：9 颠覆数学观，微积分里告诉我们严谨的公式推导计算，每一个等号换元都要仔细考虑，这门课告诉我们如果算那些没法（严谨）算的东西：最小二乘法解决超定方程，插值拟合函数。 也变成必修了 计算机软件基础 推荐指数：8 说是计算机软件基础一个听起来很普通的名字，其实是数据结构，计算机专业的最重要的专业基础课。如果想走计算机的方向这门课必须学好。里面的堆栈的概念也会在微机原理里面出现。这门课介绍不同的数据结构：顺序表，堆栈，队列……计算机专业面试笔试必考的东西。 数据库 推荐指数：6 数据库嘛，刚开始很无聊，后面就突然：这什么鬼？学到这了？SQL语句挺有用，如果想做大数据之类的可以尝试去学。但是没有学好照样可以搞数据分析之类的，因为现在的很多数据都是csv格式，pandas可以直接导入，但是pandas也用到了数据库里面主键之类的概念。 信号与系统 推荐指数：10 学完之后你就知道为什么要去学复变了，学了自动控制原理就知道为什么要学信号了。里面的卷积，单位信号，频域分析细细想来都是很有用的东西。 数字图像处理 推荐指数：10 模式识别的方向。","categories":[{"name":"Course","slug":"Course","permalink":"http://lonewolferic.github.io/categories/Course/"}],"tags":[{"name":"学习","slug":"学习","permalink":"http://lonewolferic.github.io/tags/学习/"}]},{"title":"2018暑期RM培训总结","slug":"2018-summer-vacation-RM-training-summary","date":"2018-08-30T16:00:00.000Z","updated":"2018-09-10T02:55:47.015Z","comments":true,"path":"2018/08/31/2018-summer-vacation-RM-training-summary/","link":"","permalink":"http://lonewolferic.github.io/2018/08/31/2018-summer-vacation-RM-training-summary/","excerpt":"","text":"学会的： 底盘 底盘代码熟练掌握。 了解了如何使用CAN总线的方式驱动电调控制电机转动。 dbus通信数据报。 修复了底盘电调不上电的bug，至今未出现过无法上电的情况。（不代表已经彻底修复） 实践了热插拔的危害。 PID 了解了位置式PID和增量式PID，知道两者在应用方面的区别，但是对于底层原理上的区别还不是理解的很透彻。 了解了PID里面的积分限幅部分，学会使用变比例PID控制器进行积分限幅。 学会了用visualscope进行PID调参。 调了二代步兵的底盘PID。 云台： 熟悉了云台代码结构，对于CanBusTask，RemoteTask，ControlTask三条进程熟悉了解了。 了解了云台的整个通信传输路线，帮陈独秀同志编写了正反转的拨弹电机代码。 了解了云台底盘随动系统的控制回路和控制方法。 了解了串级PID。 编程方面了解了结构体里使用函数指针，造出类的效果的方法，非常优美。 未完成的： 底盘 SetSpeed和Kp很大时电机反转问题未找出原因。 云台 未调过PID参数。 对于随动的代码只是大致了解，对于里面的细节未能熟练掌握。 还是没能搞明白（没有实践操作）为什么拨弹电机单发模式不能使用PID。 三、未来规划： 10月1日前调试完毕云台代码，对于云台的PID进行一次调参，特别是串级PID的代码。 未来调试模块的时候想调一下6500/9250, 随动控制系统, 开机自检模块上线。 想让战车实现更多的自动化方法。 在考虑是否能使用ROS使战车更加的智能化（智能路径规划，简单的视觉等等）。 好好打游戏, 争做好操作手。","categories":[{"name":"Control","slug":"Control","permalink":"http://lonewolferic.github.io/categories/Control/"}],"tags":[{"name":"RoboMaster","slug":"RoboMaster","permalink":"http://lonewolferic.github.io/tags/RoboMaster/"},{"name":"总结","slug":"总结","permalink":"http://lonewolferic.github.io/tags/总结/"}]},{"title":"浅析RM步兵机器人云台-底盘随动系统","slug":"Analysis-of-gimbal-servo-control-system","date":"2018-08-26T16:00:00.000Z","updated":"2018-09-09T04:33:17.952Z","comments":true,"path":"2018/08/27/Analysis-of-gimbal-servo-control-system/","link":"","permalink":"http://lonewolferic.github.io/2018/08/27/Analysis-of-gimbal-servo-control-system/","excerpt":"","text":"什么是随动 随动系统指的是两个部分一个主动移动，一个自动跟随主动部分移动。 在RoboMaster中，云台和底盘组成了我们的步兵机器人。操作手通过云台上的图传系统以第一视角操作机器人，这里就用到了随动系统：底盘跟随云台的旋转而旋转。 为什么要随动 对于操作手来说，操作手是以第一视角来进行操作的。当操作手发出向前移动的指令的时候，机器人需要以操作手视角的前进方向前进。机器人移动依靠底盘。看似好像没有随动什么事。来，让我们看看没有随动时的情况： 底盘运动是按照底盘的前后左右移动，所以当云台左右转动后，云台的前方向和底盘的前方向不是同一方向的。当操作手发出前进指令时，机器人会按照底盘的前进方向移动，而不是操作手的视野前方。操作手第一视角得到的反馈效果就是：我TM怎么在平移？（图下情况为向左前方移动） 如此可以看出来，没有随动系统对于操作手来说简直是灾难！如何解决这个问题呢？只要我们云台左右旋转的时候，底盘也跟随旋转就可以了，达到底盘的前后左右和云台的前后左右相同就可以了，这就是我们随动的目标。（下文中将底盘的前后左右方向和云台的前后左右方向简称为底盘相对坐标系和云台相对坐标系） 实现方案 硬件介绍 云台 YAW轴电机上图已经显示了我们控制云台方向的两个电机：YAW轴电机，PICTH轴电机，分别控制左右和上下转动角度。在云台-底盘随动系统中，我们只关心YAW轴电机。 YAW轴电机下半部分固定在底盘上，电机轴带动整个云台左右移动。 码盘也叫编码器，这里说明的码盘是YAW轴电机的码盘。绝对式编码器，可以记录电机转动了多少角度。有编码器之后就可以测出底盘相对坐标系和云台相对坐标系的相对角度差（也就是在没有随动时的期望运动方向和实际运动方向之差）。 陀螺仪 &amp; 磁力计 磁力计，安装在云台上，类似指南针，会告诉我们相对于地面来说，云台转了多少角度。获得的角度是云台相对坐标系和空间绝对坐标系的差（也就是我们操作手想让转动云台的期望值）。 底盘 麦克纳姆轮 为了实现全向移动，底盘使用麦克纳姆轮，能实现左右平移，旋转。 麦轮可以实现全向移动，但也不是没有缺点，比如给电机输出同样的力，车子向前的合力只有原来的 1 / 根号 2 。 详细介绍：传送门 控制方法设定 记住以下条件，这些是后文讲控制回路的基础： 云台YAW轴电机固定在底盘上。 云台通过云台YAW轴电机固定在底盘上。 磁力计测的是绝对角度。 码盘测的是相对角度。 图示 蓝色部分为底盘。 红色部分为云台YAW轴电机和码盘。 绿色部分为云台。 黄色部分为IMU（磁力计）。 控制阶段 云台转动操作手通过鼠标或者遥控器发送云台转动角度给定值（云台相对坐标系和空间绝对坐标系的相差角度），云台YAW轴电机转动。 底盘转动底盘跟随云台电机转动，底盘四个电机接受到旋转分量分解值。底盘向云台转动方向转动。 注意：云台是通过云台YAW轴电机固定在底盘上的，底盘转动时，云台由于这个固定关系被带动，偏移了我们的设定值。 云台回转由于云台被底盘带动，IMU检测发现云台没有在我们设定的方向上，于是按与之前相反的方向回转。云台底盘的相对坐标系重合，云台-底盘随动系统完成任务。 说明：这里是将随动的过程单位控制时间无限放大，响应速度无限提升。可以使用这一套方法来理解随动过程，但是实践运动过程中，由于我们控制回路的运行频率非常地高，所以从外面来看，这三个过程是同时完成的，底盘紧紧地跟着云台转动。 鸣谢 感谢鹏哥和阿金学长给我们细心讲解随动原理，虽然鹏哥吐槽我问太多为什么（在219单独问鹏哥原理问了一上午，也是辛苦了）。还要感谢RM的队友们，希望这一年我们可以合作愉快，做出成绩，一起冲进全国赛打进十六强！ Tell me and I will forget. Show me and I will remember. Involve me and I will understand. — Chinese proverb, From Robotics, vision and control, Fundamental Algorithms in MATLAB","categories":[{"name":"Control","slug":"Control","permalink":"http://lonewolferic.github.io/categories/Control/"}],"tags":[{"name":"RoboMaster","slug":"RoboMaster","permalink":"http://lonewolferic.github.io/tags/RoboMaster/"},{"name":"控制","slug":"控制","permalink":"http://lonewolferic.github.io/tags/控制/"}]},{"title":"用c语言实现类","slug":"Implement-class-with-C","date":"2018-08-25T16:00:00.000Z","updated":"2018-09-08T04:21:01.871Z","comments":true,"path":"2018/08/26/Implement-class-with-C/","link":"","permalink":"http://lonewolferic.github.io/2018/08/26/Implement-class-with-C/","excerpt":"","text":"c语言和c++完全就是两种不同的语言。但是c++兼容c，c++最大的特点就是引入了类（Class）。那么如何在c语言中实现类似于c++中类的操作呢？ 实现代码定义结构体 12345678910111213141516171819202122typedef struct PID_Regulator_t&#123; float ref; float fdb; float err[2]; float kp; float ki; float kd; float componentKp; float componentKi; float componentKd; float componentKpMax; float componentKiMax; float componentKdMax; float output; float outputMax; float kp_offset; float ki_offset; float kd_offset; void (*Calc)(struct PID_Regulator_t *pid); void (*Reset)(struct PID_Regulator_t *pid);&#125;PID_Regulator_t; PID计算函数 1234567891011121314151617181920212223void PID_Calc(PID_Regulator_t *pid)&#123; pid-&gt;err[1] = pid-&gt;err[0]; pid-&gt;err[0] = pid-&gt;ref-pid-&gt;fdb; pid-&gt;componentKi += pid-&gt;err[0]; if(pid-&gt;componentKi &lt; -pid-&gt;componentKiMax) &#123; pid-&gt;componentKi = -pid-&gt;componentKiMax; &#125; else if(pid-&gt;componentKi &gt; pid-&gt;componentKiMax) &#123; pid-&gt;componentKi = pid-&gt;componentKiMax; &#125; pid-&gt;output = pid-&gt;kp * pid-&gt;err[0] + pid-&gt;ki *pid-&gt;componentKi + pid-&gt;kp*(pid-&gt;err[0]-pid-&gt;err[1]); if ( pid-&gt;output &gt; pid-&gt;outputMax ) &#123; pid-&gt;output = pid-&gt;outputMax; &#125; else if ( pid-&gt;output &lt; -pid-&gt;outputMax ) &#123; pid-&gt;output = -pid-&gt;outputMax; &#125;&#125; 定义结构体时，将Calc这个函数指针指向void PID_Calc(PID_Regulator_t *pid)这个函数。 12345678910111213141516171819202122#define GIMBAL_MOTOR_PITCH_POSITION_PID_DEFAULT \\&#123;\\ 0,\\ 0,\\ &#123;0,0&#125;,\\ PITCH_POSITION_KP_DEFAULTS,\\ PITCH_POSITION_KI_DEFAULTS,\\ PITCH_POSITION_KD_DEFAULTS,\\ 1,\\ 0,\\ 0,\\ 4900,\\ 1000,\\ 1500,\\ 0,\\ 4900,\\ 30,\\ 0,\\ 0,\\ &amp;PID_Calc,\\ &amp;PID_Reset,\\&#125;\\ 某个函数中调用了这种方式来进行计算PID。 123456789void RammerSpeedPID( int16_t TargetSpeed )&#123; RAMMERSpeedPID.kp = RAMMER_SPEED_KP_DEFAULTS; RAMMERSpeedPID.ki = RAMMER_SPEED_KI_DEFAULTS; RAMMERSpeedPID.kd = RAMMER_SPEED_KD_DEFAULTS; RAMMERSpeedPID.ref = TargetSpeed; RAMMERSpeedPID.fdb = Rammer.speed; RAMMERSpeedPID.Calc(&amp;RAMMERSpeedPID);&#125; 原理函数指针是指向函数的指针变量。函数具有可赋值给指针的物理内存地址，一个函数的函数名就是一个指针，它指向函数的代码。一个函数的地址是该函数的进入点，也是调用函数的地址。将指针指向函数名也就是函数的进入点，就可以达到用指针运行函数的功能。 定义形式： 1类型 （*指针变量名）（参数列表）； 例如： 1int (*p)(int i,int j);","categories":[{"name":"Embedded","slug":"Embedded","permalink":"http://lonewolferic.github.io/categories/Embedded/"}],"tags":[{"name":"C","slug":"C","permalink":"http://lonewolferic.github.io/tags/C/"},{"name":"嵌入式","slug":"嵌入式","permalink":"http://lonewolferic.github.io/tags/嵌入式/"}]},{"title":"当学术不端成为一种风尚......","slug":"When-academic-misconduct-becomes-a-trend","date":"2018-08-11T16:00:00.000Z","updated":"2018-09-05T18:53:13.581Z","comments":true,"path":"2018/08/12/When-academic-misconduct-becomes-a-trend/","link":"","permalink":"http://lonewolferic.github.io/2018/08/12/When-academic-misconduct-becomes-a-trend/","excerpt":"","text":"事因 某川的学生团队又双叒叕获奖了，还上了川大官微，学校各种组织的公众号都在转发他们的事迹。 So？看起来没什么问题：拼命研发-参加比赛-包揽奖项-收获名誉。但是，真相就是这样的吗？ 你以为他们从底层芯片开始研究设计制造，训练神经网络，制作嵌入式系统，制作了智能化的产品。但是其实，他们的整套东西就是淘宝200块买来的，至于嵌入式嘛，是指导老师找人外包做的。别问我为什么知道这些，因为他们的外包是我们做的。 （别问我是哪个团队，本文对事不对人） 爸妈怎么看？ 回家之后，在旅游的路上和爸妈讲了这个，先给他们看了川大官微的报道。然后和他们说了实情 我：他们这个东西其实完全没有写过一行代码，xx是淘宝200块买的（给妈妈看淘宝链接），他们的xx是外包给我们做的。 妈：他们这个东西让评委觉得很厉害了。 我：他们这个东西，别说检测xx的xx了，连检测是不是xx都不行。文章里面说的是通过深度学习方法检测xx，但是其实是淘宝买来的，代码用的都是里面事先烧好的代码。更本没用到他们说的技术。（你告诉我说一个普通嵌入式芯片能跑深度学习？还完全不发热？） 妈：但他们这个得奖了啊，这说明他们的资源整合能力很好，这也是他们的能力。 我：资源整合能力？excuse me？他们是xx学院（工科学院）的人，以后出来是当攻城狮的！攻城狮就是来解决实际问题，提供解决方案的。不是来搞资源整合的，那是商学院的人干的事情。 妈：他们能搞，你们怎么不也去搞一个呢？他们自己找人帮忙做事也是他们的能力。 我：是他们让他们的指导老师找的我们…… So爸妈的意思就是他们“整合”了资源，参加了比赛拿了奖，然后就可以心安理得地将奖状拥入怀中了？靠着淘宝买来的看似高端技术其实低级的产品，披上深度学习的外衣，文案里写上自己完全没有做的技术，拿着外包做的xx。这样的行为还很值得效仿？ 思考 我不知道该说什么好 工科生最重要的品质就是实干精神。面对工程问题，根据自己的理论知识和实践经验，提出可行的方案并实践，与bug为伍，不怕艰辛，只因心存信仰。 这样的团队，完全突破了工科生的底线，通过投机取巧来获取名誉，这就是弄虚作假，学术不端啊！ 指导老师不知道实情吗？肯定知道，为什么放任还帮助他们呢？因为他们得奖，指导老师就可以获得丰厚的奖励。 可笑啊，可笑！ 遥想当年初入川大，开学典礼一结束，就是一个讲学风诚信的讲座。台上的老先生温文尔雅，滔滔不绝，和我们讲做学问要踏实，耐得住寂寞。他举了韩国科学家为了功名利禄宣布自己克隆出人类的科研成果，最后被揭发严惩的例子。台上，讲了一个小时的他也没有停下来的意思，喝了一口水继续给我们强调学术态度端正的重要性。台下，学生听的津津有味，也被老先生对于学术的严谨认真态度所动容，时而掌声雷动。讲座差不多持续了两个小时，没有多少人选择掏出手机消磨时光。校长的致辞一个字都没有记住，但是老先生的音容笑貌却历历在目。 可是现在呢？出于功利心的考虑，人人为了能在综评，保研的时候能够加分，不惜弄虚作假-找外面的人给钱做，拿别人做好的东西说是自己的。校级奖状可以加x分，省级可以加x分，国际级奖项可以加x分。 学生出于功利心造假还不是最可怕的。可怕的是这个学校这个体制鼓励你作假！我不管你是怎么样的，只要拿奖了，我就支持你，给你加分，报道你的”丰功伟绩“，给你拨经费（川大创新创业浮夸风就是这么来的）。作假的学生拿了奖励，好好干活的学生却什么都没得到，难免心里不平衡。整个学院，整个学校都在告诉你拿奖才是最重要的，至于怎么得来的，没有人关心。学生造假拿奖，指导老师还可以收获不小的奖励，于时老师也对学生的学术不端造假行为睁一只眼闭一只眼。 爸妈的态度更是让我震惊！不仅没有对于他们作假的行为表示谴责，还赞扬了他们所谓的“资源整合能力”。为了拿奖，我们甚至可以抛下道德准则于不顾。只是为了在保研加分项里多能上那么一两分。 如果中国的每一个工程师都来搞“资源整合”，那么谁来做研发，中国未来的科技将由谁来推动？中华民族的伟大复兴讲如何实现？ 那颗芯片，你们忘了吗！？ 2003年，上海交通大学微电子学院院长陈进宣称研发了自主芯片“汉芯一号”，但其实只是将摩托罗拉芯片抹掉了logo。“汉芯造假”事件成为中国科研史上最大的“丑闻”之一。 “汉芯”事件，中国现代科研史最大的黑点。 “汉芯”事件，中国科研人心里永远的痛，“汉芯”一出，破灭了中国人民对于我国在高新科技领域有重大突破的梦想。从此中国不敢在芯片领域有所重大研究投入，只怕“汉芯”再现！ 仔细想想，”汉芯“为什么能祸起萧墙，也许就是大学时：“嘿，你把摩托罗拉的芯片拿过来，写上你的名字去参加比赛，报告书就写用你深度学习方法对芯片你内部进行设计评估，参加xxx比赛，准能获奖，这样保研加分全都有了，说不定科协还会报道我们呢！” 千里之堤，毁于蚁穴 华夏之才，毁于造假 勿以善小而不为，勿以恶小而为之 也许汉芯事件就这这样来的吧。 不知道下一个汉芯将会是谁？ 后记 嗯嗯，就在我这篇文章写完后不到两天，下一个“汉芯”出场了，不过这次改的是姓——“红芯” “红芯事件” 让我细思极恐的是，“红芯”浏览器刚开始宣传的时候说自己是研发了世界上第五个浏览器内核，而现在却又承认是基于Chrome的项目。从学术角度来讲，石锤是学术不端行为了。但是这些学术不端行为在商业界不但没有受到处罚，还融到了2.5个亿！而且现在还活的好好的。 也不知道该如何结束这个沉重的话题，只希望当我们踏入社会的时候，依然能够像现在这样，不向造假势力妥协。 Never compromise ——Rorschach","categories":[{"name":"Life","slug":"Life","permalink":"http://lonewolferic.github.io/categories/Life/"}],"tags":[{"name":"评论","slug":"评论","permalink":"http://lonewolferic.github.io/tags/评论/"},{"name":"杂谈","slug":"杂谈","permalink":"http://lonewolferic.github.io/tags/杂谈/"}]},{"title":"《数电》学习总结","slug":"Digitial-circuit-learning-summary","date":"2018-08-01T16:00:00.000Z","updated":"2018-09-09T02:08:58.765Z","comments":true,"path":"2018/08/02/Digitial-circuit-learning-summary/","link":"","permalink":"http://lonewolferic.github.io/2018/08/02/Digitial-circuit-learning-summary/","excerpt":"","text":"数电是一门专业基础课，讲的是数字电路，所以在数电的世界里只有0和1。数电的直接应用是FPGA，而我认为数电更像是一门为其他课程打基础的课程。比如数电的直接服务对象——微机原理。数电本身的一些东西学了之后只是知道了有这么一个东西，但是在微机原理中，你会看到这些数字电路的直接使用，为他们的奇妙作用而惊叹。当然啦，对于外人来说，感觉这个世界还有自己的电脑竟然全是靠着这些0，1来构成的，感觉非常的神奇@曾某。 数制 &amp; 逻辑代数 二进制，八进制，十进制，十六进制。用的最多的就是十六进制和十进制。BCD码更像是表示码，有点c语言中char的感觉哈哈。 数电引入了逻辑代数，在简单的电路分析中会感觉逻辑代数很累赘，不如自己直接分析逻辑来的舒服。但是，一门学科要成为科学，就必定要用数学公式来表达一切。在复杂的数字电路中，逻辑表达式在电路分析方面显得极其有用。 逻辑代数中还告诉我们有很多种方法来表达一个数字电路的输入输出关系。 真值表：枚举所有可能情况，主要用于设计电路的时候使用。 逻辑表达式：数学公式表达结果，主要用于正向运算。 卡诺图：用于简化逻辑表达式。 波形图：常用于表示时序，主要用在异步时序电路中。 基本逻辑门电路 主要的制作材料为TTL和COMOS。BJT，MOS工作于截至区和饱和区。 特殊的门电路 传输门 控制门两端是否相连，双向导通。 OD门 需要外接电阻和电源，最大的特点是可以实现线与功能。 三态门 通过EN来控制门是否工作，工作时单向导通，不工作时高阻。主要用于微机中的总线接口处。 门电路关心的参数 电平匹配 噪声容限 传输延时（多级联的时候竞争冒险很严重） 扇入扇出数：能带动多少门。（带载能力） 组合逻辑电路 编码器，译码器，数据选择器，数值比较器，运算电路（半加器，全加器，超前进位加法器） 主要功能每个电路都各有各的特点，在微机中用的最多的就是译码器，用于选中AB上选择的外设。 组合电路里主要的计算就是依靠逻辑表达式了，感受到了数学公式的强大和巧妙之处，我们没有必要推每一个门电路的输入输出状态再推到最终输出，直接依靠数学公式就可以解决了。 时序逻辑电路 为什么叫时序电路呢？主要就是引入了时序电路的基本单元——触发器。 锁存器 &amp; 触发器 锁存器 锁存器由双稳态电路组成，中间用E做控制电路，控制使能，一般来说在E为高电平的时候使能。触发器能“记忆”前一个状态，主要功劳就是双稳态电路，双稳态电路是一种将输出引回到输入端的电路，达到稳态效果。 触发器 触发器基本电路由两个锁存器组成，外部特性就是触发器对上升下降沿敏感，而锁存器对高低电平敏感。 锁存器具体怎么组成触发器的呢？大致的原理就是两个级联，电平信号在两个触发器只有在高低电平转换的一瞬间可以同时使能一下。简单来说就是……趁锁存器不注意给他信号。 时序电路设计和分析时序电路分为同步和异步时序电路，主要区别在于电路中所有的触发器的时钟信号是不是同一个。 同步时序电路分析主要通过激励方程，触发器特性方程（状态方程）来得到输出方程。分析还是比较容易的，因为有数学公式。 设计呢主要就是逆向设计了，根据要求画出真值表，简化状态，编码，选择触发器，最后检查自启动。 异步时序电路异步时序电路的分析一般来说分析都是使用时序波形图来分析，因为时钟公式不一样，这样运用逻辑表达式来计算的时候就不是很方便。 存储器 按材质分分为DRAM和SRAM。 DRAM由于是用电容来储存的，电容会漏电，所以需要刷新（读出数据之后再把数据写入）。 还有一个学到的东西就是，终于知道为什么金条上的RAM芯片是8个了——8个数据位，为了并行读取数据。 FPGA 不算是考试学习的重点，但是了解下还是挺有意思的。 FPGA（Field－Programmable Gate Array），即现场可编程门阵列。编程之后的效果就是能够在FPGA内部产生大量的门电路。 FPGA最大的特点就是他是使用门电路来实现功能的。程序的运行是跟着时钟频率走的。反观单片机，作为一个微机，单片机所有的数据处理都由CPU来处理，为了能实现一些操作的并发执行，还要分时间片处理每一个进程。从实质上来讲，算是”假“的并发执行。然而FPGA，由于所有的门电路操作都是由时钟驱动的，达到了真正的并发执行。这就是FPGA厉害的地方——强大的并发执行能力。难怪现在说的硬件人工智能化都是在说FPGA。 波形产生电路 主要就是555定时器组成单稳态触发器、施密特触发器和多谐振荡器。","categories":[{"name":"Course","slug":"Course","permalink":"http://lonewolferic.github.io/categories/Course/"}],"tags":[{"name":"学习","slug":"学习","permalink":"http://lonewolferic.github.io/tags/学习/"},{"name":"电路","slug":"电路","permalink":"http://lonewolferic.github.io/tags/电路/"}]},{"title":"《计算机网络与通信》学习总结","slug":"Computer-network-learning-summary","date":"2018-07-31T16:00:00.000Z","updated":"2018-09-09T02:08:58.769Z","comments":true,"path":"2018/08/01/Computer-network-learning-summary/","link":"","permalink":"http://lonewolferic.github.io/2018/08/01/Computer-network-learning-summary/","excerpt":"","text":"自动化专业的计网给我的感觉是一种科普性质的课程，对于层次概念的要求比较高，对于实践不及计算机专业。（计算机专业要求他们根据所学知识设计底层的通信程序） 绪论网络的核心是由路由器构成的网，网络的边缘才是我们这些上网的终端。 网络通信里面有个很好玩的两军问题，这个思想实验说明了在不可靠通信链路上面试图通过通信达到一致是非常困难的。 数据包传输方式 电路交换：连接实际的电路，传输信息 分组交换：将大的数据包拆分成较小的部分，加上报文头部组成报文。 延迟网络的四种延迟： nodal processing delay queueing delay（玩游戏的时候卡主要就是他） transmission delay propagation delay 五层网络模型 应用层HTTP喜闻乐见的网页服务 stateless：服务器不保留任何访问过的请求信息，cookie才保留访问请求信息。chrome F12 network就可以看到server向我们要了那些cookie数据。 FTP传输文件 E-mail SMTP 主要用于发邮件，因为这个协议需要两方同时在场，如果那他来收邮件就会出现不登陆没法收邮件的情况。 POP3 用于收邮件，可以下载邮件，但是是单向的，客户端操作无法对服务器端产生影响。 IMAP 相比POP3增加了双向通道，客户端操作可以同步到服务器端。 DNS 域名解析，将网址转化为IP地址。 传输层TCP &amp; UDP大名鼎鼎的TCP/IP TCP面向连接，可靠的数据传输，但是因此传输速度远不及UDP。 UDP是尽力而为的传输方式，有数据包丢失，但是速度快，用于容忍数据包丢失的场合。 RDT解释了TCP是如何一步步来的。从完全可靠的数据传输链路出发，一步步认为每一个地方都具有可能是不可靠的。最后形成了最终的模型。 网络层IP主要就是子网划分：一般的ip都是定死的8的整数倍是网络号，剩下的都是主机号，这样想要组一个子网就会造成ip地址的大量浪费，于时出现子网分割来让我们的网络更加合理地应用。 Routing algorithms Link State 全局感知，算法有点动态规划的感觉。（好像就是动态规划） Distance Vector局部感知，只知道和自己相连的路由器的情况，每次算路径通过与自己相连的路由器交换路由表来获取最短路径。 链路层 &amp; 物理层网路层用IP地址来表示一个终端的身份，而链路层用的是MAC地址。 CSMA/CD (Collision Detection，冲突检测) 交换机 &amp; 集线器：交换机能分割广播域，而集线器只是单纯地将总线相连。 其他学了计网之后了解了IP到底是啥？为啥要装路由器？还有就是知道了WLAN和WIFI的区别，一个是虚拟局域网，一个是实现它的协议。","categories":[{"name":"Course","slug":"Course","permalink":"http://lonewolferic.github.io/categories/Course/"}],"tags":[{"name":"总结","slug":"总结","permalink":"http://lonewolferic.github.io/tags/总结/"},{"name":"学习","slug":"学习","permalink":"http://lonewolferic.github.io/tags/学习/"},{"name":"网络","slug":"网络","permalink":"http://lonewolferic.github.io/tags/网络/"}]},{"title":"学傻了的对话（不定时更新）","slug":"study-to-death","date":"2018-06-30T16:00:00.000Z","updated":"2018-09-02T14:35:42.303Z","comments":true,"path":"2018/07/01/study-to-death/","link":"","permalink":"http://lonewolferic.github.io/2018/07/01/study-to-death/","excerpt":"","text":"芝士就是力量！ 和张大仙一起去校外吃铁板烧，他先把选好的菜给老板，我后给，结果我的铁板烧先烧好。 张：为什么你在我之后给的，结果先烧好了？ 我：也许他们是用堆栈烧饭的吧！ 高大佬又双叒叕在说自己要学不完了 （空间） 我：我也要学不完了 高：大佬说笑了，你们各个都考的比我高 我：上学期成绩谁好你心里有点ACD数 高：上学期关这学期什么事 我：你以为你是非因果系统啊！（这里其实说错了，暴露学渣本质了……） 詹：因果LTI 我：不对这个应该是记忆系统……","categories":[{"name":"Others","slug":"Others","permalink":"http://lonewolferic.github.io/categories/Others/"}],"tags":[{"name":"杂谈","slug":"杂谈","permalink":"http://lonewolferic.github.io/tags/杂谈/"}]},{"title":"关于单片机初始化的注意事项","slug":"a-bug-about-microcontroller-initalization","date":"2018-06-16T16:00:00.000Z","updated":"2018-09-09T02:08:58.769Z","comments":true,"path":"2018/06/17/a-bug-about-microcontroller-initalization/","link":"","permalink":"http://lonewolferic.github.io/2018/06/17/a-bug-about-microcontroller-initalization/","excerpt":"","text":"为了让单片机完成我们所需的功能，我们每次都会使用到很多的外设，并且在控制系统中，为了保证控制的时效性，有一个专门的定时器来产生中断，进入控制环——controlloop，在主函数的循环中则放入不痛不痒的程序——led闪烁之类的。一个标准的单片机程序流程为：初始化各个外设，进入while(1)循环，定时器定时产生中断，在中断中，完成控制任务，回到while(1)，再进入下一个中断，解算姿态……以此循环往复。（本程序中TIM14产生定时中断） 在外设数量较多，并有可能又要添加新外设的情况下，我们通常使用BSP（board support package ，板级支持包 ）来管理外设。主要的好处是不用每次添加新外设的时候在每个外设的程序前面去包含新的外设头文件。 所以我们的程序一般就变成了这样。 bsp_Init中初始化全部外设。 这看起来是一个没问题的程序，但是实际运行的时候，却跑不起来。 BUG在哪里呢？bug在于初始化的顺序，以上面的程序为例，运行之后发现程序卡住了，进入debug发现程序卡死在这里，这是干什么用的呢？printf的发送程序，等待发送完成的信号。为什么没等到发送完成呢？因为串口都还没初始化啊！ 正常的程序，运行流程图应该是这样的： 这个错误的程序，运行流程图是这样的：（外设2依然会初始化完成，但在如果在还没初始化完成的时候就进入中断，就会出现问题） 问题出现在，控制程序controlloop是肯定要用到外设的——串口，ADC之类的。如果过早进入定时器中断，外设还未初始化完成，就会出现程序轮询一直等相应的情况——等待串口数据发送完成，等待ADC采样完成（程序卡死一般都是因为while(xx == 1)这句等待而导致的）。但是其实根本没法完成，因为这些还没开机初始化呢。 所以，在单片机程序中，产生定时器定时中断的timer必须放在最后初始化。如下图所示：","categories":[{"name":"Embedded","slug":"Embedded","permalink":"http://lonewolferic.github.io/categories/Embedded/"}],"tags":[{"name":"嵌入式","slug":"嵌入式","permalink":"http://lonewolferic.github.io/tags/嵌入式/"}]},{"title":"纪念第一次参加技术类比赛：船模大赛","slug":"my-first-model-boat-race","date":"2018-05-15T16:00:00.000Z","updated":"2018-09-09T02:08:58.765Z","comments":true,"path":"2018/05/16/my-first-model-boat-race/","link":"","permalink":"http://lonewolferic.github.io/2018/05/16/my-first-model-boat-race/","excerpt":"","text":"做个船模比赛心好累 前期调试 比赛前三周开始调模块，主控芯片采用stm32f407，通讯采用蓝牙串口模块，没用24L01的原因是……没调出来；电机采用2212无刷电机。不得不说，在所有的模块调试里面，通讯是最麻烦的：电机、舵机、两路ADC花了半天就调好了，通讯调了一天半。 看似把模块组合在一起很简单，但这就是硬件玄学的地方。 初赛 爆肝调船！由于之前没有调过无刷电机（抱歉菜到大家了），一直不知道怎么对频。还是靠着电子科技园的陈大佬带我学会了对频。整个船差不多多能跑起来已经是比赛前一天下午了。但是还是有bug-通讯卡死问题。 bug没调完，那怎么办呢？当然是熬夜爆肝调啦！ 收拾下桌子开始干活！ 不得不说，ddl是第一生产力，一个晚上让船的电机舵机联调成功，使用暴力手段解决了通讯卡死问题，调完了一套备用的蓝牙串口模块（HC-12） 然而……第二天比赛却因为下雨而推迟了一天…….迟了一天…….了一天…….一天…….天……. 本来多了一天，以为能让船下水的，结果出现了电机无法调速的bug，在调试的时候把电池电用光了，而且电池被我们榨干用坏了，充不进去电。队友小姐姐就跑出去买电池了。 下水比赛当天才是第一次下水，上午评完外观分（我们的船叫Aurora，嘻嘻），下午我们自己试船（离比赛开始只有4h）。 没做过船模，不了解电机性能，第一次试的时候，舵机初始化的时候是歪的，h2212的动力太大，我自己操作也不熟悉，推动摇杆，船直接飞了出去。船飞到岸上，把自己的肚子撞裂了……（韵阳小姐姐抱起我们的船跑回去修） 简单地用热熔胶糊上了裂口处，我们的船又下水了，为了防止船出bug，我们给船装上了安全绳：当船动不了的时候还可以手动把船拉回来。然后一出船，舵机方向还是没摆正，水中乱绕了几圈之后不动了。这时！安全绳的作用就体现了出来。可是不拉不要紧，一拉，由于船受到的是侧面的力，我们的Aurora直接侧翻倒在了水中…… 翻船了之后我们以最快的速度把船拉了回来（电子元件在通电的情况下进水是大忌！），但还是晚了一步。蓝牙的灯已经不亮了，烧模块了哇！但是我还有前面一次调完的HC-12模块，但当时由于卡死问题更严重，所以没有使用。当时情况紧急，心态有点乱，本来也是有HC-05的，但是AT指令输进去之后没有配对成功，心态爆炸。这时也只能死马当活马医了，换上了新的通讯模块之后，电机不转了…… 电机不转也可以说是电调的问题，本来在设置满油门的时候需要设置初始化，设置完一次之后就不用再设置了，但现在每次掉电之后都需要重新设置油门量程。 H2212实在是太强劲了，就跟脱缰的野马一样，速度太快，完全控制不住。这种比赛比的是稳定性，所以临时换电机，换成了动力较弱的A2212电机。 缝缝补补总算是把下水发现的问题全改了。 赛场 一直没时间去解决的是遥控器的电源问题，为了解决这个问题，本项目组采用了“基于surface pro3的船模遥控系统”。好吧，其实就是用电脑的usb供电。 作为一个操作手，我的练习时间还是太少了，但是我们的船跑的慢啊，按错一个键也没啥关系，往回拉就没事了。初赛只是想苟过去，最后的晋级名单也验证了我的想法－所有跑完赛道的船全都进决赛了。 决赛先是用两块3.7v电池和5v稳压模块解决了遥控器供电的问题（总算不用抱着电脑开船了），然后莫名奇妙的就调好了H2212电机和电调，但是在之后某次调船的时候电调进水烧掉了。 这个时候船主要的问题就是通信，蓝牙通信实在太不稳定，距离太近了，淘宝界面说的500+m都没问题，实际跑起来10m撑死。导致我们调船的时候经常出现船跑到一半停湖中间了，然后我就脱鞋赤脚下去捞…… 电调烧了之后电机和电调就莫名其妙的没法跑了，我也是头铁，不撞南墙不回头。但是无刷电机还是没有调出来。直到赛前一天才打算临时换方案：使用775有刷电机作为动力源，还好配套的联轴器。 实验室里现场改代码，但是一个引脚的pwm波总是出不来，但没有什么好的调试方法–我根本没法知道波形到底出来没有。so我们把电子科技园的示波器搬回了寝室！（最后是发现高级定时器初始化的时候还要对于pwm使能多配置一个东西） 临时改方案当然是要通宵改了，为了防止自己躺床上起不来但又想睡觉只能这样做了： 所以当时下午3点比赛，上午还要进行技术测评，测评完就来到极客邦调，无法解决有刷电机的调速问题，于时用示波器来看去驱动板输出波形，结果不小心探头抖了一下，然后就…… 决赛赛场赛前发现船转向速度有点慢，然后……校园卡就决定是你了！ 由于是临时换的电机，也没有电机固定支架之类的，所以就只能用胶带勉强固定一下。 为了测试电机有没有转反，我和两位小姐姐进了女厕用厕所里洗手盆的水测试转反没有，中途又有另一位小姐姐进来，看到我在里面，那场面…… 开船的时候嘛emmmmm船前半段跑的好好的，结果跑到一半船没法跑了，动了下舵机的功能，发现能动，那就是电机的问题了。喊了船爹妈之后终于是动了起来，但是船就是动一下然后停很久。但最后也总算是跑完了全程。 还有一次重赛的机会，知道船出了问题之后下来立马对船进行抢修，一看驱动板烧了，开始换驱动板，可惜焊锡和驱动板的大端口质量不好也没装上去。 最后发现其实是胶带的锅，胶带固定的不牢，电机转动的时候把胶带卷进去了，然后电机长时间堵转，导致驱动板烧毁。 其他 做了比赛才知道自己有多么的菜，但是反观这个比赛，我们发现基础功能才是最重要的，初赛的时候只要是能跑的船就能进决赛，决赛专业组也是只要跑完全程就能有奖。","categories":[{"name":"Embedded","slug":"Embedded","permalink":"http://lonewolferic.github.io/categories/Embedded/"}],"tags":[{"name":"控制","slug":"控制","permalink":"http://lonewolferic.github.io/tags/控制/"},{"name":"嵌入式","slug":"嵌入式","permalink":"http://lonewolferic.github.io/tags/嵌入式/"},{"name":"比赛","slug":"比赛","permalink":"http://lonewolferic.github.io/tags/比赛/"}]},{"title":"Hello World","slug":"hello-world","date":"2018-04-29T16:00:00.000Z","updated":"2018-09-02T14:33:49.597Z","comments":true,"path":"2018/04/30/hello-world/","link":"","permalink":"http://lonewolferic.github.io/2018/04/30/hello-world/","excerpt":"","text":"个人博客上线啦！ 我是谁?&emsp;&emsp;四川大学电气信息学院的大二本科生，自我介绍什么的，About里面都有 为什么开始写博客?&emsp;&emsp;主要是为了不让自己太颓啦，最近实在是太咸鱼了。开个博客，给自己点动力和压力，摆脱咸鱼的处境 &emsp;&emsp;其次也是想好好记录一下自己的生活，自己做东西的经验，对人生的看法之类的 &emsp;&emsp;还有就是羡慕各位大佬都有自己的网站，羡慕嫉妒恨，所以我也搞一个，哼～ 为什么要叫孤狼?&emsp;&emsp;孤狼，意为桀骜不训，永不低头。向往着真理与正义，却又承受着自我求索的孤寂。独行，却不孤寂；狂野，却又不无情。 &emsp;&emsp;好吧，以上内容皆为扯淡，孤狼的真正含义是这样的：来跟我读：孤(single)狼(dog) &emsp;&emsp;觉得叫“孤狼”不顺口叫“表表”也行 为什么不去开公众号?&emsp;&emsp;如果开了微信公众号，由于爸妈用的都是微信，so～想像一个场景：我爸打开微信，看到自己儿子的公众号又出了一篇新文章，他打开一看，儿子又烧了一块板子，嗯～这次经验总结的很好。然后就转发到自己的朋友圈（日常秀娃）下面的评论区就会出现各种emmmm……你们懂的。尴尬癌都要犯了……. &emsp;&emsp;其实也还有其他原因，YY硕的文章里告诉我们可以去学点html，css，javascript，最好的练习方式就是去帮别人写网站，但……没人要我帮忙写！？那就给自己写过个呗。顺便练练web编程（其实使用jekyll框架 + 模板也没练多少编程，但是！有个个人网站感觉很geek啊！） 其他&emsp;&emsp;更新频率？布吉岛，看心情更新，努力做到一月一更吧 &emsp;&emsp;每篇博文都有评论功能，大家有啥想法可以评论哈，禁止乱膜陆大佬（陆大佬是谁？喵喵瞄？）","categories":[{"name":"Others","slug":"Others","permalink":"http://lonewolferic.github.io/categories/Others/"}],"tags":[{"name":"杂谈","slug":"杂谈","permalink":"http://lonewolferic.github.io/tags/杂谈/"}]}]}